name: Docker Build with CPU EXLA

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Prepare build context with CPU EXLA
      run: |
        echo "ðŸ”§ Preparing Docker build context with CPU-optimized EXLA..."
        BUILD_DIR="docker_build_context"
        rm -rf $BUILD_DIR
        mkdir -p $BUILD_DIR
        
        # Copy main files
        cp mix.exs mix.lock $BUILD_DIR/
        cp -r config $BUILD_DIR/
        cp .dockerignore $BUILD_DIR/ || true
        
        # Create CPU-optimized Dockerfile
        cat > $BUILD_DIR/Dockerfile << 'EOF'
        FROM elixir:1.17
        
        RUN apt-get update && apt-get install -y \
            git build-essential nodejs npm postgresql-client \
            python3 python3-pip cmake liblapack-dev libblas-dev
        
        ENV XLA_TARGET=cpu
        ENV EXLA_TARGET=host
        ENV MIX_ENV=prod
        
        WORKDIR /app
        
        RUN mix local.hex --force && mix local.rebar --force
        
        COPY . .
        
        # Configure EXLA for CPU
        RUN mkdir -p config && \
            echo 'import Config' > config/runtime.exs && \
            echo 'config :exla, :clients, default: [platform: :host], host: [platform: :host]' >> config/runtime.exs
        
        # Ensure EXLA is enabled (not commented out)
        RUN sed -i 's/# {:exla,/{:exla,/' apps/vsm_security/mix.exs || true
        
        RUN mix deps.get --only prod
        RUN mix deps.compile exla
        RUN mix compile
        
        EXPOSE 4000 4001 4040 50051
        
        CMD ["mix", "phx.server"]
        EOF
        
        # Create apps directory
        mkdir -p $BUILD_DIR/apps
        
        # Copy each app, following symlinks
        for app in apps/*; do
          if [ -e "$app" ]; then
            app_name=$(basename "$app")
            echo "Copying $app_name..."
            cp -rL "$app" "$BUILD_DIR/apps/" 2>/dev/null || echo "Warning: Could not copy $app_name"
          fi
        done
        
        echo "Build context prepared with $(ls $BUILD_DIR/apps | wc -l) modules"

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=cpu-exla

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./docker_build_context
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Test CPU EXLA image
      run: |
        echo "âœ… CPU-optimized EXLA image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cpu-exla"